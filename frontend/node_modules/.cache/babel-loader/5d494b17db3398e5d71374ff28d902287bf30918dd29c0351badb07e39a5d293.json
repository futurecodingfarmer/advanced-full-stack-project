{"ast":null,"code":"var _jsxFileName = \"/Users/yiminglu/Downloads/advanced-starting-fullstack-project/frontend/src/pages/Events.js\",\n  _s = $RefreshSig$();\n// new hook - useLoaderData to get the closest loader data\nimport { useLoaderData } from 'react-router-dom';\nimport EventsList from '../components/EventsList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction EventsPage() {\n  _s();\n  const data = useLoaderData();\n  if (data.isError === true) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: events.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 12\n    }, this);\n  }\n  ;\n  const events = data.events;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(EventsList, {\n      events: events\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n// export async function loader() {\n//     const response = await fetch('http://localhost:8080/events');\n\n//     if (!response.ok) {\n//       // return { isError: true, message: 'Could not fetch events.' };\n//       throw new Response(JSON.stringify({ message: 'Could not fetch events.' }), {\n//         status: 500,\n//       });\n//     } else {\n//       return response;\n//     }\n//   };\n\n// export const loader = async () => {\n//   const response = await fetch(\"http://localhost:8080/eventsss\");\n//   if (!response.ok) {\n//     throw new Response(JSON.stringify({message:'Could not fetch events!'}),{\n//         status: 500\n//     });\n//   } else {\n//     return response;\n//   }\n// };\n\n// export default EventsPage;\n_s(EventsPage, \"5thj+e1edPyRpKif1JmVRC6KArE=\", false, function () {\n  return [useLoaderData];\n});\n_c = EventsPage;\nvar _c;\n$RefreshReg$(_c, \"EventsPage\");","map":{"version":3,"names":["useLoaderData","EventsList","jsxDEV","_jsxDEV","Fragment","_Fragment","EventsPage","_s","data","isError","children","events","message","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/yiminglu/Downloads/advanced-starting-fullstack-project/frontend/src/pages/Events.js"],"sourcesContent":["// new hook - useLoaderData to get the closest loader data\nimport { useLoaderData } from 'react-router-dom';\nimport EventsList from '../components/EventsList';\n\nfunction EventsPage() {\n  const data = useLoaderData();\n  if(data.isError === true){\n    return <p>{events.message}</p>;\n  };\n\n  const events = data.events;\n  return (\n    <>\n      <EventsList events={events} />\n    </>\n  );\n}\n\n// export async function loader() {\n//     const response = await fetch('http://localhost:8080/events');\n  \n//     if (!response.ok) {\n//       // return { isError: true, message: 'Could not fetch events.' };\n//       throw new Response(JSON.stringify({ message: 'Could not fetch events.' }), {\n//         status: 500,\n//       });\n//     } else {\n//       return response;\n//     }\n//   };\n\n\n// export const loader = async () => {\n//   const response = await fetch(\"http://localhost:8080/eventsss\");\n//   if (!response.ok) {\n//     throw new Response(JSON.stringify({message:'Could not fetch events!'}),{\n//         status: 500\n//     });\n//   } else {\n//     return response;\n//   }\n// };\n\n// export default EventsPage;"],"mappings":";;AAAA;AACA,SAASA,aAAa,QAAQ,kBAAkB;AAChD,OAAOC,UAAU,MAAM,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAElD,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EACpB,MAAMC,IAAI,GAAGR,aAAa,EAAE;EAC5B,IAAGQ,IAAI,CAACC,OAAO,KAAK,IAAI,EAAC;IACvB,oBAAON,OAAA;MAAAO,QAAA,EAAIC,MAAM,CAACC;IAAO;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAK;EAChC;EAAC;EAED,MAAML,MAAM,GAAGH,IAAI,CAACG,MAAM;EAC1B,oBACER,OAAA,CAAAE,SAAA;IAAAK,QAAA,eACEP,OAAA,CAACF,UAAU;MAACU,MAAM,EAAEA;IAAO;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAG,iBAC7B;AAEP;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAAT,EAAA,CAvCSD,UAAU;EAAA,QACJN,aAAa;AAAA;AAAAiB,EAAA,GADnBX,UAAU;AAAA,IAAAW,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}