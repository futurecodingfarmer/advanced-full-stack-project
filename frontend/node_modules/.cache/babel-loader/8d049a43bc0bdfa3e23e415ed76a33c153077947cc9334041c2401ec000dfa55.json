{"ast":null,"code":"var _s = $RefreshSig$();\n// new hook - useLoaderData to get the closest loader data\nimport { useLoaderData, json, defer } from 'react-router-dom';\nimport EventsList from '../components/EventsList';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EventsPage() {\n  _s();\n  const {\n    events\n  } = useLoaderData();\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: \"Awai\"\n  }, void 0, false);\n}\n_s(EventsPage, \"xTcuS98fsVcq20se00iLm8bDBmQ=\", false, function () {\n  return [useLoaderData];\n});\n_c = EventsPage;\nasync function loadEvents() {\n  const response = await fetch('http://localhost:8080/events');\n  if (!response.ok) {\n    // return { isError: true, message: 'Could not fetch events.' };\n    //   throw new Response(JSON.stringify({ message: 'Could not fetch events.' }), {\n    //     status: 500,\n    //   });\n    throw json({\n      message: 'Could not fetch events.'\n    }, {\n      status: 500\n    });\n  } else {\n    return response;\n  }\n}\nexport function loader() {\n  return defer({\n    events: loadEvents()\n  });\n}\n;\nexport default EventsPage;\nvar _c;\n$RefreshReg$(_c, \"EventsPage\");","map":{"version":3,"names":["useLoaderData","json","defer","EventsList","Fragment","_Fragment","jsxDEV","_jsxDEV","EventsPage","_s","events","children","_c","loadEvents","response","fetch","ok","message","status","loader","$RefreshReg$"],"sources":["/Users/yiminglu/Downloads/advanced-starting-fullstack-project/frontend/src/pages/Events.js"],"sourcesContent":["// new hook - useLoaderData to get the closest loader data\nimport { useLoaderData, json, defer} from 'react-router-dom';\nimport EventsList from '../components/EventsList';\n\nfunction EventsPage() {\n  const { events } = useLoaderData();\n\n  \n  return (\n    <>\n      Awai\n    </>\n  );\n}\n\nasync function loadEvents(){\n  const response = await fetch('http://localhost:8080/events');\n  \n  if (!response.ok) {\n  // return { isError: true, message: 'Could not fetch events.' };\n  //   throw new Response(JSON.stringify({ message: 'Could not fetch events.' }), {\n  //     status: 500,\n  //   });\n   throw json({ message: 'Could not fetch events.' }, {\n      status: 500\n    });\n  } else {\n    return response;\n  }\n\n}\n\n\nexport function loader() {\n\n  return defer({\n    events: loadEvents()\n  });\n  \n};\n\n\n\n\nexport default EventsPage;"],"mappings":";AAAA;AACA,SAASA,aAAa,EAAEC,IAAI,EAAEC,KAAK,QAAO,kBAAkB;AAC5D,OAAOC,UAAU,MAAM,0BAA0B;AAAC,SAAAC,QAAA,IAAAC,SAAA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAElD,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EACpB,MAAM;IAAEC;EAAO,CAAC,GAAGV,aAAa,EAAE;EAGlC,oBACEO,OAAA,CAAAF,SAAA;IAAAM,QAAA,EAAE;EAEF,iBAAG;AAEP;AAACF,EAAA,CATQD,UAAU;EAAA,QACER,aAAa;AAAA;AAAAY,EAAA,GADzBJ,UAAU;AAWnB,eAAeK,UAAUA,CAAA,EAAE;EACzB,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;EAE5D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IAClB;IACA;IACA;IACA;IACC,MAAMf,IAAI,CAAC;MAAEgB,OAAO,EAAE;IAA0B,CAAC,EAAE;MAChDC,MAAM,EAAE;IACV,CAAC,CAAC;EACJ,CAAC,MAAM;IACL,OAAOJ,QAAQ;EACjB;AAEF;AAGA,OAAO,SAASK,MAAMA,CAAA,EAAG;EAEvB,OAAOjB,KAAK,CAAC;IACXQ,MAAM,EAAEG,UAAU;EACpB,CAAC,CAAC;AAEJ;AAAC;AAKD,eAAeL,UAAU;AAAC,IAAAI,EAAA;AAAAQ,YAAA,CAAAR,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}