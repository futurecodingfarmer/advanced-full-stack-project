{"ast":null,"code":"\n// import { useRouteLoaderData, json, redirect, defer, Await } from \"react-router-dom\";\n// import EventItem from '../components/EventItem';\n// import EventsList from \"../components/EventsList\";\n// import { Suspense } from \"react\";\n\n// const EventDetailsPage = (props) => {\n//     const { event, events } = useRouteLoaderData('event-detail');\n//     return (\n//     <>\n//     <Suspense fallback={<p style={{textAlign: 'center'}}>Loading..</p>}>\n//     <Await resolve={event}>\n//         {(loadedEvent) => <EventItem event={loadedEvent} />}\n//     </Await>\n//     </Suspense>\n//     <Suspense fallback={<p style={{textAlign: 'center'}}>Loading..</p>}>\n//     <Await resolve={events}>\n//         {(loadedEvents) => <EventsList events={loadedEvents} />}\n//     </Await>\n//     </Suspense>\n//     </>\n// );\n// };\n\n// export default EventDetailsPage;\n\n// async function loadEvents(){\n//     const response = await fetch('http://localhost:8080/events');\n\n//     if (!response.ok) {\n//      throw json({ message: 'Could not fetch events.' }, {\n//         status: 500\n//       });\n//     } else {\n//       const resData = await response.json();\n//       return resData.events;\n//     }\n\n// };\n\n// async function loadEvent(id){\n//     const response = await fetch('http://localhost:8080/events/' + id );\n\n//     if(!response.ok){\n//         throw json({message: 'Could not fetch details for selected event'}, {\n//             status: 500\n//         });\n//     }else{\n//       const resData = await response.json();\n//       return resData.event;\n//     }\n\n// };\n\n// export const loader = async ({request, params}) => {\n\n//     const id = params.eventId;\n//     return defer(\n//         {\n//             event: loadEvent(id),\n//             events: loadEvents()\n//         }\n//     );\n\n// };\n\n// export const action = async ({request, params}) => {\n\n//     const eventId = params.eventId;\n//     const response = await fetch('http://localhost:8080/events/' + eventId, {\n//         method: request.method\n//     } );\n\n//     if(!response.ok){\n//         throw json({message: 'Could not delete event'}, {\n//             status: 500\n//         });\n//     }\n\n//     return redirect('/events');\n\n// };","map":{"version":3,"names":[],"sources":["/Users/yiminglu/Downloads/advanced-starting-fullstack-project/frontend/src/pages/EventDetail.js"],"sourcesContent":["\n// import { useRouteLoaderData, json, redirect, defer, Await } from \"react-router-dom\";\n// import EventItem from '../components/EventItem';\n// import EventsList from \"../components/EventsList\";\n// import { Suspense } from \"react\";\n\n// const EventDetailsPage = (props) => {\n//     const { event, events } = useRouteLoaderData('event-detail');\n//     return (\n//     <>\n//     <Suspense fallback={<p style={{textAlign: 'center'}}>Loading..</p>}>\n//     <Await resolve={event}>\n//         {(loadedEvent) => <EventItem event={loadedEvent} />}\n//     </Await>\n//     </Suspense>\n//     <Suspense fallback={<p style={{textAlign: 'center'}}>Loading..</p>}>\n//     <Await resolve={events}>\n//         {(loadedEvents) => <EventsList events={loadedEvents} />}\n//     </Await>\n//     </Suspense>\n//     </>\n// );\n// };\n\n// export default EventDetailsPage;\n\n// async function loadEvents(){\n//     const response = await fetch('http://localhost:8080/events');\n    \n//     if (!response.ok) {\n//      throw json({ message: 'Could not fetch events.' }, {\n//         status: 500\n//       });\n//     } else {\n//       const resData = await response.json();\n//       return resData.events;\n//     }\n    \n// };\n\n// async function loadEvent(id){\n//     const response = await fetch('http://localhost:8080/events/' + id );\n\n//     if(!response.ok){\n//         throw json({message: 'Could not fetch details for selected event'}, {\n//             status: 500\n//         });\n//     }else{\n//       const resData = await response.json();\n//       return resData.event;\n//     }\n\n// };\n\n// export const loader = async ({request, params}) => {\n\n//     const id = params.eventId;\n//     return defer(\n//         {\n//             event: loadEvent(id),\n//             events: loadEvents()\n//         }\n//     );\n\n// };\n\n\n// export const action = async ({request, params}) => {\n\n//     const eventId = params.eventId;\n//     const response = await fetch('http://localhost:8080/events/' + eventId, {\n//         method: request.method\n//     } );\n\n//     if(!response.ok){\n//         throw json({message: 'Could not delete event'}, {\n//             status: 500\n//         });\n//     }\n    \n//     return redirect('/events');\n\n// };\n\n\n\n\n"],"mappings":";AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}